*Proposing Successfully*

1. Keep it short and punchy.

Most conferences get over a hundred proposals. Put yourself in the shoes of an
organizer who has read 30 abstracts before yours, and wants to do 10 more
before he stops for the day. Think of it as speed dating: you've got 5 minutes
to pique his interest and get him wanting to hear more. Remember that your
proposal should make the reader want to see your talk.


2. Include social proof.

When you give your talks, look for feedback on Twitter (and solicit some if
there isn't any). Save links to the good stuff and include them in your
proposal (quote, plus a link to the original; the link is important). This
technique has two substantial benefits. First, it assuages an organizer's
concern that he's going to pick a bad speaker. It makes his life easier, which
is extremely good for you. Second, since not a lot of speakers will do this, it
will make you stand out from the crowd.


3. Titles matter.

Shoot for intriguing and memorable, in that order. Come up with a couple
candidates for your title and get input from friends. Which talk would YOU
rather hear?


4. Have a good bio.

Do cool stuff and talk about it.


4. Send a follow-up email.

Reach out to the organizers with a friendly email. Tell them you're excited
about your conference and that you'd love to speak. Again, you're trying to
stand out from the masses of eager speakers, so be personable.


Here's a proposal I submitted recently. It was accepted at NordicRuby, which
took only 12 talks from a pool of 113.

Title: What Rubyists should Steal from Haskell and Clojure

Abstract: Ruby is a great little language, but that doesn't mean it got
everything right.  This talk will be a tour of the best features from Clojure
and Haskell that you can't find in Ruby. The goal isn't to try to convert you
to these languages, but to expand your knowledge of the best ideas in
programming language design.  We'll also see how understanding the rationale
behind these features can help you write better Ruby.

If concepts like anaphora, destructuring binds, and monads aren't familiar to
you, prepare to learn some powerful concepts. And don't worry: this won't be
some voice-from-the-clouds, ivory tower tutorial. Just a pragmatic guy teaching
cool ideas with simple examples. No neckbeard required.

Notes to organizers: (Here's where I gush about their conference a litle.)

Then, I include the following quotes, gathered after my most-recent talk:

"@r00k you're one of the best presentors I've ever seen in tech."
https://twitter.com/#!/sayhar/status/165851089860702208

"@r00k and what a presentation it was. i wish you were my public speaking
professor." https://twitter.com/#!/tony_ciampa/status/165954726695944193

"@r00k is killing - calisthenics, comedy, hecklers, and great super-fast coding
w/ vim" https://twitter.com/#!/pattytoland/status/165849474747469824


Bio: Ben has spoken in several countries and in multiple languages, in venues
varying from tiny conference rooms to giant lecture halls.

He is the co-founder of the Boston Vim Meetup, creator of vimuniversity.com,
and author of Speaking for Hackers.

When not demanding that everyone remap caps lock to escape, Ben writes code at
thoughtbot, occasionally correctly.
===============================================================================

*Kill Your Introduction*

After attending many conferences and dozens of talks, I've noticed a disturbing
trend among speakers: most of them start with an introduction.

Their first slide has the title of the talk.

Their second slide states their name and employer.

Their third slide covers what the talk is about. This is usually the same
abstract that's been published for months on the conference site.

Their fourth slide is usually some sort of back-story like who invented the
concept they'll be talking about, or a survey of the landscape around their
topic.

Finally, around slide number five and minute six, they begin to teach the
audience something of value. If you forced them to stop after five minutes and
ask the audience what useful things they've learned so far, they would have
virtually no answer.

My advice to conference speakers is this: kill your introduction.

I start nearly all my talks like this: "My name is Ben Orenstein and I work for
thoughtbot. This talk is about why vim is the greatest text editor ever
written. The most important thing for you to take away from this talk is X."

One sentence intro. One sentence summary. Third sentence is the most important
idea of the talk.

If you stopped one of my talks after five minutes, my audience would have
learned four minutes and fifty-five seconds of useful information. And they
certainly would have already heard the main thesis of my talk.

There are two reasons I structure my talks this way:

1. There is no need to establish yourself as an authority. People tend to be
very good at detecting competence. If you have impressive credentials but don't
seem to know what you're talking about, you'll lose credibility rapidly.
Likewise, if you are clearly an expert on your topic your credentials are
irrelevant. Make sure you know your subject matter cold, and trust people to
spot your expertise.

2. The number of people listening to you over time steadily declines with time.
However, for the first minute or so you'll have nearly everyones' attention.
Don't waste this opportunity! Hit them with your most important ideas
immediately so that when they do tune out they're missing less and less
important information. As a bonus, by being immediately useful and interesting,
the slope of your tune-out graph will be shallower.

Journalists are trained to front-load their articles so that an editor can chop
any amount off the end and still have a usable piece. Think of your talks this
way and your audiences will thank you.

===============================================================================

*Practicing Your Talk*

Practice talk in as close to live conditions as possible. Every variable that
is different between your practicing and actual talk presents risk. 

One thing many speakers forget is that the resolution on their screen will be much
lower than usual when plugged into a projector. It's an extremely good idea to
drop your resolution to around 800x600 and run your entire talk. You'll be
surprised at how many things you'll have to tweak. 

Additionally, virtually all talks are subject to a time constraint. DO NOT go
over your time allotment! It is immensely disrespectful to your audience in two
ways. First, it says that you didn't care enough to practice to make sure you
came in under time. Second, it shows a lack of concern for the rest of your
audience's day. So don't just estimate and hope. Practice with a timer and make
sure you're in good shape. 

By the way, if you find yourself rushing skipping slides and saying "I'm just
gonna skip over this because we're short on time" you've blown it. If that
material wasn't important, why was it in your talk? And if it is important,
your lack of practice just made you dump something that you should have
covered.

Note: most talks run long. It's rare for speakers to finish early. Recognize
this and err on finishing early. This will just mean an extended Q&A and/or an
early finish for your audience, which usually feels like getting out of class a
bit ahead-of-schedule.

===============================================================================

*Pre-talk checklist*

Whenever I'm creating and practicing a talk, I start a section at the top of my
notes file containing the steps needed to prepare my machine to give the talk.
It's very easy to forget something small that will cause your demo to blow up,
so don't leave this to chance. You DON'T want to try to remember these things
when you're five minutes from taking the stage. 

Right before my talks I'm always a bit nervous, but running through my
preparation checklist a few times gives me confidence that nothing will
surprise me later.

Here are a few things that are in almost all my checklists:
  * clear browser history 
  * clear browser autofill 
  * hide browser bookmarks bar
  * bump up text size in browser 
  * clean stray icons off your desktop 
  * invert colors for readability (Ctrl+Alt+Command+8 on OS X) 
  * bump up text size in editor 
  * print out notes
  * remember to bring DVI/VGA-to-DisplayPort adapter if you own a Mac
  * change energy settings so your laptop won't sleep
  * get excited!
